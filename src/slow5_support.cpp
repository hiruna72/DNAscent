#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <slow5/slow5.h>
#include "reads.h"

#define TO_PICOAMPS(RAW_VAL,DIGITISATION,OFFSET,RANGE) (((RAW_VAL)+(OFFSET))*((RANGE)/(DIGITISATION)))

int slow5_print_version(){
    fprintf(stderr,"slow5lib version: %s\n",SLOW5_LIB_VERSION);
    return 0;
}

void slow5_getSignal(DNAscent::read &r, slow5_file_t *sp){

	slow5_rec_t *rec = NULL; //slow5 record to be read
    int ret=0; //for return value

    //fetch the read with read_id "r3"
    ret = slow5_get(r.readID_fetch.c_str(), &rec, sp);
    if(ret<0){
        fprintf(stderr,"Error in when fetching the read %s\n", r.readID_fetch.c_str());
        exit(EXIT_FAILURE);
    }

    //normalise signal to pA
	r.raw.reserve(rec->len_raw_signal);
	for ( size_t i = 0; i < rec->len_raw_signal; i++ ){
		r.raw.push_back( ((float) rec->raw_signal[i] + (float) rec->offset) * ((float) rec->range/(float)rec->digitisation) );
	}

    //if this is a bam file generated by dorado, apply the appropriate signal slicing
	if ( r.signalLength > 0){
		//trim raw signal from the parent if this is a split read
		if (r.readID != r.readID_fetch){
			assert(r.signalLength > 0);
			size_t sig_start = r.signalStartCoord + r.signalTrim;
			size_t sig_end = r.signalStartCoord + r.signalLength;
			r.raw.erase(r.raw.begin(), r.raw.begin() + sig_start);
			r.raw.erase(r.raw.begin() + (sig_end - sig_start), r.raw.end());
		}
		else{ //trim using the normal dorado bounds if the read wasn't split

			size_t sig_start = r.signalTrim;
			size_t sig_end = r.signalLength;
			r.raw.erase(r.raw.begin(), r.raw.begin() + sig_start);
			r.raw.erase(r.raw.begin() + (sig_end - sig_start), r.raw.end());
		}
	}

    //free the SLOW5 record
    slow5_rec_free(rec);

}

